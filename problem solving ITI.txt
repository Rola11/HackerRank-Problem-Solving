1)Arrays - DS

vector<int> reverseArray(vector<int> a) {
    vector<int>reversarray;
    for(int i=0;i<a.size();i++)
      reversarray.push_back( a[a.size()-i-1]);
      
    return reversarray;  
}


2)2D Array - DS

int hourglassSum(vector<vector<int>> arr) {
   int result,sum;
   for(int i=1;i<5;i++)
   {
       for(int j=1;j<5;j++)
       {
        sum=(arr[i][j]+arr[i-1][j]+arr[i+1][j]+arr[i-1][j+1]+arr[i-1][j-1]+
        arr[i+1][j-1]+arr[i+1][j+1]);
        
        if(i==1&&j==1)
         result=sum;
         
        if(sum>result)
            result=sum;
       }     
   }
   return result;
}


3) Left Rotation

vector<int> rotateLeft(int d, vector<int> arr) {
    for(int i=0;i<d;i++)
    {
        int x;
        x=arr[0];
        arr.erase(arr.begin());
        arr.push_back(x);
    }
    return arr;
}


4) Print the Elements of a Linked List

void printLinkedList(SinglyLinkedListNode* head) 
{
while (head->next != nullptr) {
   cout<<head->data<<"\n";
   head=head->next;
}
cout<<head->data;
}

5)  Equal Stacks

int equalStacks(vector<int> h1, vector<int> h2, vector<int> h3) {
    int result,sz1=0,sz2=0,sz3=0;
    stack<int>s1,s2,s3;
    
    for(int i=h1.size()-1;i>=0;i--)
    {
       sz1+=h1[i]; 
         s1.push(sz1);
    }
    
    for(int i=h2.size()-1;i>=0;i--)
    {
       sz2+=h2[i]; 
         s2.push(sz2);
    }
    
    for(int i=h3.size()-1;i>=0;i--)
    {
       sz3+=h3[i]; 
         s3.push(sz3);
    }
    
    while (true) {
       if(s1.empty()||s2.empty()||s3.empty())
          return 0;
        if(s1.top()==s2.top()&&s2.top()==s3.top())
        {
            result=s1.top();
            break;
        }
        if(s1.top()>=s2.top()&&s1.top()>=s3.top())
        {
            s1.pop();
        }
        else if(s3.top()>=s2.top()&&s3.top()>=s1.top())
        {
            s3.pop();
        }
        else 
        {
            s2.pop();
        }
    }
    
   return result;
}

6) Insert a node at the head of a linked list

SinglyLinkedListNode* insertNodeAtHead(SinglyLinkedListNode* llist, int data) {
     SinglyLinkedListNode *v=new SinglyLinkedListNode(data);
      v->next=llist;
    return v;
}

7) Insert a Node at the Tail of a Linked List

SinglyLinkedListNode* insertNodeAtTail(SinglyLinkedListNode* head, int data) {
SinglyLinkedListNode* tail=head;
SinglyLinkedListNode* val= new SinglyLinkedListNode(data);
if(head==nullptr)
{
   head=val; 
}
else
{
    while (tail->next!=NULL) {
      tail=tail->next;
    }
    tail->next=val;
    val->next=nullptr;
}

return head;
}



8)Insert a node at a specific position in a linked list

SinglyLinkedListNode* insertNodeAtPosition(SinglyLinkedListNode* llist, int data, int position) 
{
    SinglyLinkedListNode* val= new SinglyLinkedListNode(data);
 int counter=0;
 if(position==0)
 {
     val->next=llist;
 }
 else
 {
     SinglyLinkedListNode* tail=llist;
     while (counter!=(position-1)) {
         tail=tail->next;
         counter++;
     }
     val->next=tail->next;
     tail->next=val;
 }
 return llist;
}


9) Delete a Node

SinglyLinkedListNode* deleteNode(SinglyLinkedListNode* llist, int position) {
if(llist==nullptr)
{
   delete llist;
   return nullptr;
}
else if(position==0)
{
      SinglyLinkedListNode* val=llist;
       llist=val->next;
       delete val;
       return llist;
}
else
{
    int counter=0;
    SinglyLinkedListNode* tail=llist;
    while (counter!=(position-1)) {
      tail=tail->next;
      counter++; 
    }
    SinglyLinkedListNode* val=tail;
    val=val->next;
    tail->next=val->next;
    delete val;
    return llist;
}
}


10) Print in Reverse

void reversePrint(SinglyLinkedListNode* llist) {
SinglyLinkedListNode* trave=llist;
SinglyLinkedListNode* stack=nullptr;
while (trave!=NULL) {
SinglyLinkedListNode* newdata=new SinglyLinkedListNode(trave->data);

newdata->next=stack;
stack=newdata;
trave=trave->next;
}
trave=stack;
while (trave!=NULL) {
cout<<trave->data<<"\n";
trave=trave->next;
}
 
}

11)Reverse a linked list

SinglyLinkedListNode* reverse(SinglyLinkedListNode* llist) {
  SinglyLinkedListNode* trave=llist;
  SinglyLinkedListNode* stack=nullptr;
 while (trave!=NULL) {
       SinglyLinkedListNode* newdata=new SinglyLinkedListNode(trave->data);

        newdata->next=stack;
        stack=newdata;
        trave=trave->next;
}

trave=stack;

return trave;

}


12)Compare two linked lists

bool compare_lists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    int flage=1,fh1=0,fh2=0;
    SinglyLinkedListNode* head11=head1;
    SinglyLinkedListNode* head22=head2;
while (head11->next!=NULL&&head22->next!=NULL) {
     if(head11->data==head22->data)
     {
         head11=head11->next;
         head22=head22->next;
     }
     else
     {
         flage=0;
         break;
     }
}
if(head11->next==nullptr)
   fh1=1;
if (head22->next==nullptr) {
   fh2=1;
}
   if(!flage)
      return 0;
   else if(fh1!=fh2)
      return 0;
   else
  {
     return 1;  
  } 
 
}

13) Merge two sorted linked lists

SinglyLinkedListNode* mergeLists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    if (head1==nullptr) {
     return head2;
    }
    if (head2==nullptr) {
      return head1;
    }
SinglyLinkedListNode* list1=head1;
SinglyLinkedListNode* list2=head2;

SinglyLinkedListNode* merg=new SinglyLinkedListNode(-1);
SinglyLinkedListNode* fir=merg;
while (list1!=NULL &&list2!=NULL) {
  if(list1->data >= list2->data)
  {
      
      merg->next=list2;
      list2=list2->next;
  }
  else
  {
      merg->next=list1;
      list1=list1->next;
  }
  merg=merg->next;
}
while(list1!=nullptr) {
  merg->next=list1;
   list1=list1->next;
   merg=merg->next;
}
if (list2!=nullptr) {
  merg->next=list2;
  list2=list2->next;
  merg=merg->next;
}
fir=fir->next;
return fir;
}


14)Get Node Value


int getNode(SinglyLinkedListNode* llist, int positionFromTail) {
int counter=0,val;
SinglyLinkedListNode* lis1=llist;
while (lis1!=nullptr) {
counter++;
lis1=lis1->next;
}

val=counter-positionFromTail;
int num=0,res;
lis1=llist;
while (lis1!=nullptr) {
    if(num==(val-1))
    {
        res= lis1->data;
        break;
    }
lis1=lis1->next;
num++;
}
return res;
}


15) Delete duplicate-value nodes from a sorted linked list


SinglyLinkedListNode* removeDuplicates(SinglyLinkedListNode* llist) {
SinglyLinkedListNode* prev=llist;
SinglyLinkedListNode* next1=llist->next;


while (next1!=nullptr) {
  if (prev->data == next1->data) {
    SinglyLinkedListNode* del=next1;
    prev->next=next1->next;
    delete del;
    next1=prev->next;
  }
  else {
  next1=next1->next;
  prev=prev->next;
  }
}
return llist;
}


16) Sparse Arrays

vector<int> matchingStrings(vector<string> stringList, vector<string> queries) {
  vector<int>res;
  for(int i=0;i<queries.size();i++)
  {
      int counter=0;
      for(int j=0;j<stringList.size();j++)
      {
          if(queries[i]==stringList[j])
            counter++;
      }
      res.push_back(counter);
      counter=0;
  }
  return res;
}


17)Inserting a Node Into a Sorted Doubly Linked List


DoublyLinkedListNode* sortedInsert(DoublyLinkedListNode* llist, int data) 
{

DoublyLinkedListNode* add=new DoublyLinkedListNode(data);

if(llist==nullptr)
    return add;
      
DoublyLinkedListNode* counter=llist;
if(counter->data >= add->data)        /// node = add
{
    add->prev=NULL;
    add->next=counter;
    counter->prev=add;
    return add;
}
else
{
    int flag=0;
    while (counter!=nullptr) {    // temp = counter 
     if(counter->data >= add->data)
     {
         add->next=counter;
         add->prev=counter->prev;
         counter->prev->next=add;
         counter->prev=add;
         break;
     }
     else if(counter->next==nullptr)
     {
       add->prev=counter;
       counter->next=add;
       break;
     }
       counter=counter->next;
    }
   
}
return llist;
}




18)everse a doubly linked list


DoublyLinkedListNode* reverse(DoublyLinkedListNode* llist) {
if(llist->next==nullptr)
   return llist;

// head
DoublyLinkedListNode* re=llist->next;
llist->next=llist->prev;
llist->prev=re;
// in mid
while (re->next!=nullptr) {       
    DoublyLinkedListNode* counter=re->next;
 
  re->next=re->prev;
  re->prev=counter;
  
  re=counter;
}
// tail
re->next=re->prev;
re->prev=nullptr;

return re;
}



19)QHEAP1


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<set>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    set<int> pq;
    long queries;
    long n;
    long v;
    cin>>queries;   
    while(queries--)
    {
      cin>>n;
      if(n==1)
      {
        cin>>v;
        pq.insert(v); 
      }
      if(n==2)
      {
        cin>>v;
        pq.erase(pq.find(v));
      }
      if(n==3)
      {
        cout<<*(pq.begin())<<endl;
      }
    }
    
    return 0;
}


20)Maximum Element


#include <iostream>

#include <stack>
#include <sstream>
#include <string>
using namespace std;

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n, query_type, query_value, maximum;
    string query_line;
    stack<int> s, max_tracker;
    cin >> n;
    cin.ignore();
    for (int i = 0; i < n; i++) {
        getline(cin, query_line);
        istringstream ss(query_line);
        ss >> query_type >> query_value;
        switch (query_type) {
        case 1:
            s.push(query_value);
            if (max_tracker.empty() || max_tracker.top() <= query_value)
                max_tracker.push(query_value);
            break;
        case 2:
            if (s.top() == max_tracker.top())
                max_tracker.pop();
            s.pop();
            break;
        default:
            cout << max_tracker.top() << endl;
        }
    }
    return 0;
}


